// –ò–ú–ü–û–†–¢–´
require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios = require('axios');

// –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ .env –∏–ª–∏ Variables');
  process.exit(1);
}

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const CONFIG = {
  // üîó –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL –æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ Apps Script
  GOOGLE_SHEETS_API: 'https://script.google.com/macros/s/AKfycbx-y37OLu71QFtoLUT_2IKQncwqr39DVkd6cFM4394OHTZzH2QTTLyNDgDmuRYDCqO2/exec',

  // ‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å
  NOTIFICATION_HOURS_BEFORE: 1,

  // üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (Tashkent)
  TIME_ZONE: 'Asia/Tashkent'
};

// –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• (–≤ –ø–∞–º—è—Ç–∏)
const TEMP_ADMIN_IDS = ['2014390848'];
let ADMIN_CHAT_IDS = new Set(); // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
let MANAGERS_DATA = [];        // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
let ALL_TASKS = [];            // –ò–∑ Cooperation
let ALL_CLIENTS = [];          // –ò–∑ Leads

// –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† (—Ç—ã, –≤–ª–∞–¥–µ–ª–µ—Ü)
const OWNER_CHAT_ID = '299788619'; // ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!

function isOwner(chatId) {
  return chatId.toString() === OWNER_CHAT_ID;
}

// === –ó–ê–ì–†–£–ó–ö–ê –° GitHub (–æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫) ===

async function loadTasks() {
  try {
    const url = 'https://raw.githubusercontent.com/MrXan99/Ilmlar_Shahri_CRM_Bot/main/data/tasks.json';
    const response = await axios.get(url, {
      timeout: 10000,
      headers: { 'User-Agent': 'Mozilla/5.0' }
    });

    if (Array.isArray(response.data)) {
      ALL_TASKS = response.data.filter(t => t['Mijoz IDsi']);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ALL_TASKS.length} –∑–∞–¥–∞—á`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error.message);
  }
}

async function loadClients() {
  try {
    const url = 'https://raw.githubusercontent.com/MrXan99/Ilmlar_Shahri_CRM_Bot/main/data/clients.json';
    const response = await axios.get(url, {
      timeout: 10000,
      headers: { 'User-Agent': 'Mozilla/5.0' }
    });

    if (Array.isArray(response.data)) {
      ALL_CLIENTS = response.data;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ALL_CLIENTS.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
  }
}

async function loadManagers() {
  try {
    const url = 'https://raw.githubusercontent.com/MrXan99/Ilmlar_Shahri_CRM_Bot/main/data/managers.json';
    const response = await axios.get(url, {
      timeout: 10000,
      headers: { 'User-Agent': 'Mozilla/5.0' }
    });

    if (Array.isArray(response.data)) {
      MANAGERS_DATA = response.data;
      ADMIN_CHAT_IDS = new Set(
        MANAGERS_DATA
          .filter(m => ['admin', 'manager'].includes((m['Lavozimi'] || '').toLowerCase()))
          .map(m => m['ChatID'].toString())
          .filter(Boolean)
      );
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${MANAGERS_DATA.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error.message);
  }
}

// –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê
function isAuthorized(chatId) {
  const idStr = chatId.toString();
  const isOwnerCheck = isOwner(idStr);
  const isAdminCheck = ADMIN_CHAT_IDS.has(idStr);

  console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', {
    userId: idStr,
    isOwner: isOwnerCheck,
    isAdmin: isAdminCheck,
    allAdminIds: [...ADMIN_CHAT_IDS]
  });

  return isOwnerCheck || isAdminCheck;
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function filterByDate(tasks, targetDate) {
  const target = new Date(targetDate);
  target.setHours(0, 0, 0, 0);

  return tasks.filter(task => {
    const taskDate = new Date(task['Keyingi harakat sanasi']);
    taskDate.setHours(0, 0, 0, 0);
    return taskDate.getTime() === target.getTime();
  });
}

function getActionEmoji(action) {
  if (!action) return 'üìã';
  const a = action.toLowerCase();
  if (a.includes('demo') || a.includes('dars')) return 'üéì';
  if (a.includes('qo\'ng\'iroq')) return 'üìû';
  if (a.includes('konsul')) return 'üìä';
  if (a.includes('sinov')) return 'üéØ';
  return 'üìã';
}

function formatTime(dateString) {
  try {
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (–∫–∞–∫ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö)
    if (!isNaN(parseFloat(dateString))) {
      const days = parseFloat(dateString);
      const date = new Date(Date.UTC(1899, 11, 30)); // –±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ Excel
      date.setUTCDate(date.getUTCDate() + days);
      const timeString = date.toLocaleTimeString('uz-UZ', {
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Asia/Tashkent'
      });
      return timeString;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ ISO
    const date = new Date(dateString);
    if (isNaN(date)) return 'Noto‚Äòg‚Äòri vaqt';

    return date.toLocaleTimeString('uz-UZ', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Asia/Tashkent'
    });
  } catch (error) {
    console.error('‚ùå Vaqtni formatlashda xato:', error);
    return 'Vaqtni aniqlab bo‚Äòlmadi';
  }
}

function getClientInfo(clientId) {
  if (!clientId || !ALL_CLIENTS || !Array.isArray(ALL_CLIENTS)) {
    return { name: 'Mijoz aniqlanmadi', phone: '+998 -- --- --' };
  }

  // –û—á–∏—â–∞–µ–º ID (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–µ–ª–æ–≤)
  const cleanId = clientId.trim().toLowerCase();

  // –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª—è–º
  const client = ALL_CLIENTS.find(c => {
    const idFields = [
      c['Mijoz IDsi'],
      c['ID'],
      c['Client ID'],
      c['Ism Familiya'] // –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ ID
    ].map(val => val ? val.toString().trim().toLowerCase() : '');

    return idFields.some(field => field === cleanId);
  });

  if (!client) {
    console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', clientId);
    return { 
      name: 'Mijoz aniqlanmadi', 
      phone: '+998 -- --- --' 
    };
  }

  return {
    name: client['Ism Familiya'] || client['Ismi'] || 'Ismi ko\'rsatilmagan',
    phone: client['Telefon raqami'] || client['Telefon'] || '+998 -- --- --'
  };
}

async function formatTask(task) {
  const { name, phone } = getClientInfo(task['Mijoz IDsi']);
  const emoji = getActionEmoji(task['Keyingi harakat']);
  const time = formatTime(task['Keyingi harakat sanasi']);

  return (
    `${emoji} *${task['Keyingi harakat']}*\n\n` +
    `üë§ *Mijoz:* ${name}\n` +
    `üì± *Telefon:* ${phone}\n` +
    `üïí *Vaqt:* ${time}\n` +
    `üë®‚Äçüíº *Xodim:* ${task['Xodim'] || 'Ko\'rsatilmagan'}`
  );
}

// –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê

// /start
bot.start(async (ctx) => {
  const chatId = ctx.chat.id.toString();

  if (!isAuthorized(chatId)) {
    return ctx.replyWithMarkdown('üö´ *Ruxsat yo‚Äòq*');
  }

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  await Promise.all([loadManagers(), loadTasks(), loadClients()]);

  const user = MANAGERS_DATA.find(m => m['ChatID'].toString() === chatId);
  const name = user ? user['Xodim'] : ctx.from.first_name;

  let welcome = `üåü *Salom, ${name}*!\n\n`;

  if (isOwner(chatId)) {
    welcome += `üëë *Siz ‚Äî asosiy menejer*\n`;
  } else {
    welcome += `üë®‚Äçüíº *Siz ‚Äî administrator*\n`;
  }

  welcome += `\nüìå Sizning Chat ID: \`${chatId}\`\n\n`;
  welcome += `üìÖ Boshlash uchun /bugungi\n`;
  welcome += `üìÜ Ertangi vazifalar uchun /ertangi`;

  ctx.replyWithMarkdown(welcome);
});

// /bugungi
bot.command('bugungi', async (ctx) => {
  const chatId = ctx.chat.id.toString();
  if (!isAuthorized(chatId)) return ctx.reply('‚ùå Ruxsat yo‚Äòq');

  await loadTasks();
  const today = new Date();
  const tasks = filterByDate(ALL_TASKS, today).filter(t => !t['Bajarildimi?']);

  if (tasks.length === 0) {
    return ctx.reply('üìÖ Bugun vazifa yo‚Äòq');
  }

  ctx.replyWithMarkdown(`üìÖ *BUGUNGI VAZIFALAR (${tasks.length})*\n`);
  for (const task of tasks) {
    const message = await formatTask(task);
    const keyboard = {
      inline_keyboard: [[{
        text: '‚úÖ Bajarildi',
        callback_data: `done_${task.ID}`
      }]]
    };
    console.log('üìå –ü–µ—Ä–µ–¥–∞—é –≤ –∫–Ω–æ–ø–∫—É ID:', task.ID);
    ctx.replyWithMarkdown(message, { reply_markup: keyboard });
  }
});

// /ertangi
bot.command('ertangi', async (ctx) => {
  const chatId = ctx.chat.id.toString();
  if (!isAuthorized(chatId)) return ctx.reply('‚ùå Ruxsat yo‚Äòq');

  await loadTasks();
  const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);
  const tasks = filterByDate(ALL_TASKS, tomorrow).filter(t => !t['Bajarildimi?']);

  if (tasks.length === 0) {
    return ctx.reply('üìÖ Ertangi vazifa yo‚Äòq');
  }

  ctx.replyWithMarkdown(`üìÜ *ERTANGI VAZIFALAR (${tasks.length})*\n`);
  for (const task of tasks) {
    const message = await formatTask(task);
    const keyboard = {
      inline_keyboard: [[{
        text: '‚úÖ Bajarildi',
        callback_data: `done_${task.ID}`
      }]]
    };

    ctx.replyWithMarkdown(message, { reply_markup: keyboard });
  }
});

// /monitoring ‚Äî faqat senga
bot.command('monitoring', async (ctx) => {
  if (!isOwner(ctx.chat.id.toString())) {
    return ctx.reply('‚ùå Faqat asosiy menejerga ruxsat');
  }

  await loadTasks();
  const todayCount = filterByDate(ALL_TASKS, new Date()).length;

  ctx.replyWithMarkdown(
    `üìä *MONITORING REPORT*\n\n` +
    `üìÖ Bugun: ${todayCount} ta vazifa\n` +
    `üë• Jami adminlar: ${ADMIN_CHAT_IDS.size}\n` +
    `üîÑ Ma'lumotlar yangilangan`
  );
});

// –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "‚úÖ Bajarildi"
bot.action(/done_(.+)/, async (ctx) => {
  const taskId = ctx.match[1];
  const chatId = ctx.chat.id.toString();

  if (!isAuthorized(chatId)) {
    return ctx.answerCbQuery('‚ùå Ruxsat yo‚Äòq');
  }

  try {
    const url = `${CONFIG.GOOGLE_SHEETS_API}?action=complete&taskId=${taskId}`;
    const response = await axios.get(url, { timeout: 10000 });

    if (response.data.success) {
      await ctx.answerCbQuery('‚úÖ Vazifa bajarildi!');
      await ctx.reply('üéâ Ajoyib! Vazifa muvaffaqiyatli belgilandi.');
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    } else {
      await ctx.answerCbQuery('‚ùå Xatolik: ' + response.data.error);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ ${taskId}:`, error.message);
    await ctx.answerCbQuery('‚ùå Tarmoq xatosi');
  }
});

// =============================
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò
// =============================

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
function startScheduledJobs() {
  setInterval(async () => {
    await loadManagers();
    await loadTasks();
    await loadClients();
    console.log('üîÑ Ma ºlumotlar yangilandi');
  }, 5 * 60 * 1000);

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å
  setInterval(async () => {
    await loadTasks();
    const now = new Date();
    const oneHour = new Date(now.getTime() + 60 * 60 * 1000);

    for (const task of ALL_TASKS) {
      if (!task['Keyingi harakat sanasi'] || task['Bajarildimi?']) continue;

      const taskTime = new Date(task['Keyingi harakat sanasi']);
      if (taskTime > now && taskTime <= oneHour) {
        const message = `‚è∞ *Eslatma!* ${task['Keyingi harakat']} ‚Äî 1 soat qoldi`;

        for (const id of ADMIN_CHAT_IDS) {
          try {
            await bot.telegram.sendMessage(id, message, { parse_mode: 'Markdown' });
          } catch (e) {
            console.error(`‚ùå Xabar jo‚Äònatishda xato ${id}:`, e.message);
          }
        }
      }
    }
  }, 5 * 60 * 1000);
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: 8:00 –∏ 20:00
function startDailyReports() {
  setInterval(() => {
    const now = new Date();
    const hours = now.getUTCHours() + 5; // UTC+5 (Tashkent)
    const currentHour = hours % 24;

    if (currentHour === 8 && now.getMinutes() === 0) {
      sendTodayTasksReport();
    }

    if (currentHour === 20 && now.getMinutes() === 0) {
      sendTomorrowTasksReport();
    }
  }, 60 * 1000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–¥–∞—á
async function sendTodayTasksReport() {
  try {
    await loadTasks();
    const today = new Date();
    const tasks = filterByDate(ALL_TASKS, today).filter(t => !t['Bajarildimi?']);

    if (tasks.length === 0) {
      sendMessageToAllAdmins('üåÖ *Bugun hech qanday vazifa rejalashtirilmagan.*');
      return;
    }

    let message = `üìÖ *BUGUNGI VAZIFALAR (${tasks.length} ta)*\n\n`;
    tasks.forEach((task) => {
      const { name, phone } = getClientInfo(task['Mijoz IDsi']);
      const time = formatTime(task['Keyingi harakat sanasi']);
      const emoji = getActionEmoji(task['Keyingi harakat']);
      
      message += `${emoji} *${task['Keyingi harakat']}*\n`;
      message += `üë§ ${name}\n`;
      message += `üìû ${phone}\n`;
      message += `üïí ${time}\n`;
      message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    });

    sendMessageToAllAdmins(message);
  } catch (error) {
    console.error('‚ùå Xatolik bugungi hisobotda:', error.message);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∑–∞–¥–∞—á
async function sendTomorrowTasksReport() {
  try {
    await loadTasks();
    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);
    const tasks = filterByDate(ALL_TASKS, tomorrow).filter(t => !t['Bajarildimi?']);

    if (tasks.length === 0) {
      sendMessageToAllAdmins('üåô *Ertangi kun uchun vazifalar yo‚Äòq.*');
      return;
    }

    let message = `üìÜ *ERTANGI VAZIFALAR (${tasks.length} ta)*\n\n`;
    tasks.forEach((task) => {
      const { name, phone } = getClientInfo(task['Mijoz IDsi']);
      const time = formatTime(task['Keyingi harakat sanasi']);
      const emoji = getActionEmoji(task['Keyingi harakat']);
      
      message += `${emoji} *${task['Keyingi harakat']}*\n`;
      message += `üë§ ${name}\n`;
      message += `üìû ${phone}\n`;
      message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    });

    sendMessageToAllAdmins(message);
  } catch (error) {
    console.error('‚ùå Xatolik ertangi hisobotda:', error.message);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
function sendMessageToAllAdmins(text) {
  const chatIds = [OWNER_CHAT_ID, ...ADMIN_CHAT_IDS];

  chatIds.forEach(async (chatId) => {
    try {
      await bot.telegram.sendMessage(chatId, text, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error(`‚ùå Xabar jo'natishda xato ${chatId}:`, error.message);
    }
  });
}

// =============================
// –ó–ê–ü–£–°–ö –ë–û–¢–ê
// =============================
async function startBot() {
  try {
    console.log('üöÄ Ilmlar Shahri CRM Bot ishga tushmoqda...');

    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    await loadManagers();
    await loadTasks();
    await loadClients();

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log('‚úÖ Bot ishga tushdi!');

    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    startScheduledJobs();
    startDailyReports();

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    setTimeout(() => {
      bot.telegram.sendMessage(OWNER_CHAT_ID, 'üü¢ *Bot ishga tushdi! Hamma funksiyalar faol.*', {
        parse_mode: 'Markdown'
      }).catch(console.error);
    }, 3000);

  } catch (error) {
    console.error('‚ùå Kritik xato:', error);
    process.exit(1);
  }
}

// Graceful stop
process.once('SIGINT', () => {
  console.log('üõë Bot to‚Äòxtatilmoqda...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('üõë Bot to‚Äòxtatilmoqda...');
  bot.stop('SIGTERM');
});

// –ù–∞—á–∞–ª–æ
startBot();
